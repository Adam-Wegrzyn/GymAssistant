// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(GymAssistantDbContext))]
    [Migration("20240818073434_MissingFieldsFix")]
    partial class MissingFieldsFix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Entities.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("DataAccess.Entities.Training", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Trainings");
                });

            modelBuilder.Entity("DataAccess.Entities.TrainingLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<TimeOnly>("Duration")
                        .HasColumnType("time");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("TrainingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrainingId");

                    b.ToTable("TrainingLogs");
                });

            modelBuilder.Entity("DataAccess.Entities.TrainingSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Reps")
                        .HasColumnType("int");

                    b.Property<int?>("TrainingSetExerciseId")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal");

                    b.HasKey("Id");

                    b.HasIndex("TrainingSetExerciseId");

                    b.ToTable("TrainingSets");
                });

            modelBuilder.Entity("DataAccess.Entities.TrainingSetExercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int?>("TrainingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("TrainingId");

                    b.ToTable("TrainingSetsExercises");
                });

            modelBuilder.Entity("DataAccess.Entities.TrainingSetExerciseLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeOnly>("Duration")
                        .HasColumnType("time");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("TrainingSetExerciseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrainingSetExerciseId");

                    b.ToTable("TrainingSetExerciseLogs");
                });

            modelBuilder.Entity("DataAccess.Entities.TrainingSetLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeOnly>("Duration")
                        .HasColumnType("time");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("TrainingSetLogs");
                });

            modelBuilder.Entity("DataAccess.Entities.TrainingLog", b =>
                {
                    b.HasOne("DataAccess.Entities.Training", "Training")
                        .WithMany()
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Training");
                });

            modelBuilder.Entity("DataAccess.Entities.TrainingSet", b =>
                {
                    b.HasOne("DataAccess.Entities.TrainingSetExercise", null)
                        .WithMany("TrainingSets")
                        .HasForeignKey("TrainingSetExerciseId");
                });

            modelBuilder.Entity("DataAccess.Entities.TrainingSetExercise", b =>
                {
                    b.HasOne("DataAccess.Entities.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Training", null)
                        .WithMany("TrainingSetExercise")
                        .HasForeignKey("TrainingId");

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("DataAccess.Entities.TrainingSetExerciseLog", b =>
                {
                    b.HasOne("DataAccess.Entities.TrainingSetExercise", "TrainingSetExercise")
                        .WithMany()
                        .HasForeignKey("TrainingSetExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainingSetExercise");
                });

            modelBuilder.Entity("DataAccess.Entities.Training", b =>
                {
                    b.Navigation("TrainingSetExercise");
                });

            modelBuilder.Entity("DataAccess.Entities.TrainingSetExercise", b =>
                {
                    b.Navigation("TrainingSets");
                });
#pragma warning restore 612, 618
        }
    }
}
